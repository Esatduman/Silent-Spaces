rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      // For 'guide' users.
      match /users/{userId} {
      	allow read;
        allow create: if isValidUser(userId);
        allow delete: if canDeleteUser(userId);
        allow update: if (!request.resource.data.diff(resource.data).affectedKeys()
        .hasAny(['username']));
      }

      function isValidUser(userId) {
        let isOwner = request.auth.uid == userId;
      	let username = request.resource.data.username;
        // Require Username doc to be created along with.
        let createdValidUsername = existsAfter(/databases/$(database)/documents/usernames/$(username));
        return isOwner && createdValidUsername;
      }

      function canDeleteUser(userId) {
        let isOwner = request.auth.uid == userId;
      	let username = request.resource.data.username;
        // Require Username doc to be deleted after.
        let deletingValidUsername = !existsAfter(/databases/$(database)/documents/usernames/$(username));
        return isOwner && deletingValidUsername;
      }
      
      match /usernames/{username} {
      	allow read;
        allow create: if isValidUsername(username);
        allow delete: if canDeleteUsername(username);
      }
      
      function isValidUsername(username) {
        let isOwner = request.auth.uid == request.resource.data.uid;
        let isValidLength = username.size() >= 3 && username.size() <= 15;
        let isValidUserDoc = getAfter(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
        return isOwner && isValidLength && isValidUserDoc;     
      }

      function canDeleteUsername(username) {
        let isOwner = request.auth.uid == request.resource.data.uid;
        let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
        let deletingUser = !existsAfter(userDoc);
        return isOwner && deletingUser;
      }

      match /spaces/{spaceId} {
      	allow read;
        allow create: if canCreatePost(spaceId);
        allow update: if request.auth.uid == request.resource.data.owner;
        allow delete: if canDeletePost(spaceId);
      }

      function canCreatePost(spaceId) {
        let isOwner = request.auth.uid == request.resource.data.owner;
        let afterUserSpaces = getAfter(/databases/$(database)/documents/users/$(request.auth.uid)).data.spaces;
        let addingToSpaces = /databases/$(database)/documents/spaces/$(spaceId) in afterUserSpaces;
        return isOwner;
      }

      function canDeletePost(spaceId) {
        let isOwner = request.auth.uid == request.resource.data.owner;
        let userSpaces = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.spaces;
        let afterUserSpaces = getAfter(/databases/$(database)/documents/users/$(request.auth.uid)).data.spaces;
        let removedUserSpaces = (userSpaces.toSet().difference(afterUserSpaces.toSet()) == [spaceId].toSet());
        return isOwner && removedUserSpaces;
      }

    }
  }
}